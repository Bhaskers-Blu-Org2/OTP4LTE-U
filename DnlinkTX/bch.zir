----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include "externals.blk"
#include "crc.zir"
#include "convCode.zir"
#include "rateMatchConv.zir"

fun bch(input : arr [24] bit, cellrefp : int16) {
var inbuf : arr[MAX_BIT_MSG_SIZE] bit;
var outcode : arr[MAX_BIT_MSG_SIZE] bit;
var output : arr[MAX_BIT_MSG_SIZE] bit; 
var codelen : int16;

  -- Currently only single antenna so no scrambiling here
  -- mask = ones(16, 1) * (cellrefp - 1); -- Doug's TODO: cellrefp = 4
  -- c = [a; xor(crc16(a), mask)];

  let inlen = 24;
  inbuf[0, 24] := input;
  inbuf[inlen, 16] := crc16(input, 24);
  
  codelen := convCode(inbuf, inlen+16, outcode);
  -- Output length of MIB is hardcoded
  rateMatchConv(outcode, codelen, output, 480);
  return output[0, 480];
};


