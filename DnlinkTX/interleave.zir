----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once

#define INTL_CONV       0
#define INTL_TURBO      1

fun interleave(input : arr bit, len : int16, var output : arr [MAX_BIT_MSG_SIZE/3] int8, mode:int16, delta:int16) {
var pik : int16;

  let P = if (mode == INTL_CONV) then 
            -- Convolutional interleaver
            arr {1, 17, 9, 25, 5, 21, 13, 29, 3, 19, 11, 27, 7, 23, 15, 31,
                 0, 16, 8, 24, 4, 20, 12, 28, 2, 18, 10, 26, 6, 22, 14, 30} 
          else 
            -- Turbo interleaver
            arr {0, 16, 8, 24, 4, 20, 12, 28, 2, 18, 10, 26, 6, 22, 14, 30, 
                 1, 17, 9, 25, 5, 21, 13, 29, 3, 19, 11, 27, 7, 23, 15, 31};

  let D = int16(len);
  let CC = 32;
  let R = ceil_int16(double(D) / double(CC));
  let Kpi = CC * R;

  -- This is difficult to speed up by LUTting
  -- The output vector size is MAX_BIT_MSG_SIZE/3 == 5600B
  -- For input of size 256 bits we would need a LUT of size 1.4MB
  for (k : int16) in [0, Kpi] {
    pik := (P[k/R] + CC*(k % R) + delta) % Kpi;
    output[k] := if (pik < Kpi - D) then -1 
                 else int8(input[pik - (Kpi - D)]); 
  }

  return Kpi;

};




-- Faster version of the interleaver that interleaves 3 parts of the same array in one loop
-- This version is custom optimized for rateMatchTurbo
fun interleave3(input : arr bit, offset : int16, len : int16, var output : arr [MAX_BIT_MSG_SIZE] int8, mode:int16) {
var pik : int16;

let P = if (mode == INTL_CONV) then 
          -- Convolutional interleaver
          arr {1, 17, 9, 25, 5, 21, 13, 29, 3, 19, 11, 27, 7, 23, 15, 31,
               0, 16, 8, 24, 4, 20, 12, 28, 2, 18, 10, 26, 6, 22, 14, 30} 
        else 
          -- Turbo interleaver
          arr {0, 16, 8, 24, 4, 20, 12, 28, 2, 18, 10, 26, 6, 22, 14, 30, 
               1, 17, 9, 25, 5, 21, 13, 29, 3, 19, 11, 27, 7, 23, 15, 31};

let D = int16(len);
let CC = 32;
let R = ceil_int16(double(D) / double(CC));
let Kpi = CC * R;

for (k : int16) in [0, Kpi] {
  let p = P[k/R] + CC*(k % R);
  let pik = p % Kpi;
  let pik1 = (p + 1) % Kpi;
  if (pik < Kpi - D) then {
    output[k] := -1;
    output[k + Kpi] := -1;
  } else {
    output[k] := int8(input[pik - (Kpi - D)]); 
    output[k + Kpi] := int8(input[pik - (Kpi - D) + offset]); 
  }
  output[k + 2*Kpi] := if (pik1 < Kpi - D) then -1 
                       else int8(input[pik1 - (Kpi - D) + 2*offset]); 
}

return Kpi;

};
