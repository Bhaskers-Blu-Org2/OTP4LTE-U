----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include <externals.blk>
#include "definitions.zir"
#include "configureDCI1A.zir"
#include "configurePDSCH.zir"
#include "dcch.zir"
#include "dci.zir"
#include "dlsch.zir"
#include "pdcch.zir"
#include "pdsch.zir"
#include "addPDSCHToSubframe.zir"


-- Fill the cellGrid with RAR, if needed
-- This is hard-coded test RAR
fun comp addRARToSubframe(var cellGrid : arr complex16, frame : int16, subframe : int16, tx : struct TXParams, rapid : int8, raRnti : int32) {
var bufb : arr[MAX_BIT_MSG_SIZE] bit;
var bufb_len : int16;
var bufb2 : arr[MAX_BIT_MSG_SIZE] bit;
var bufb2_len : int16;
var bufc : arr[MAX_BIT_MSG_SIZE] complex16;
var bufc_len : int16;
var rapidbits : arr[8] bit;
var tmparr : arr[1] int8;

    -- System parameters
    let noSubCarrier = NDLRB * 12;
    
    -- OLD: hard-coding for prach-ConfigIndex 5, so subframe 7 PRACH, so raRnti 8, so RAR in subframe 1
    -- hard-coding for prach-ConfigIndex 0, so subframe 1 PRACH, so raRnti 8, so RAR in subframe 6
--    if (subframe == 6) then { 
        let rar = 
          { '0, -- Extension
            '1, -- Type
            '0,'0,'0,'0,'0,'0, -- RAPID; overwrite this
            '0, -- Reserved
            '0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0, -- Timing Advance
            '0, -- Hopping
            '0,'1,'0,'1,'0,'1,'1,'1,'1,'1, -- RB assignment; 350 = 8 PRBs starting at 1; 208 bits for our MCS
            '0,'0,'0,'0, -- MCS; 0 means QPSK, I_TBS = 0, rv_idx = 0
            '0,'0,'0, -- TPC; 0DB PUSCH power
            '0, -- UL delay
            '0, -- CQI request
            '0,'0,'0,'0,'0,'0,'0,'0,'0,'1,'0,'0,'0,'0,'0,'0 -- Temp C-RNTI = 64
          };
            
        do {
          bufb[0, 56] := rar;
          bufb_len := 56;
          
          -- Overwrite RAPID.
          tmparr[0] := rapid;
          int8_to_bits(rapidbits, tmparr);
          bufb[2, 6] := invert_bits(rapidbits[0, 6]);
        }
  
        let rv = 0; -- TODO: should we be using DCI format 1C for RAR?

       
        let startRB = 0;
        let lenRB = 12;
        let rnti = raRnti;               -- RA-RNTI
        let d = configureDCI1A(NDLRB, lenRB, startRB, bufb_len, rv, 0, 0, rnti);
        let dcibits = dci(d);

        -- Currently use CCE4 for Dnlink
        -- emits dcch(dcibits, rnti) >>> pdcch(subframe, 0, tx) >>> 
        emits dcch(dcibits, rnti) >>> pdcch(subframe, 4, tx) >>> 
        repeat {
          pdcch_symbols <- takes 36;

          -- PDCCH index is currently calculated in Matlab and hardcoded
          -- Currently use CCE4 for Dnlink
          --let pdcchi = {1216, 1217, 1218, 1219, 1064, 1065, 1066, 1067, 1368, 1369, 1370, 
          --              1371, 1592, 1593, 1594, 1595, 696, 697, 698, 699, 546, 547, 549, 
          --              550, 1440, 1441, 1442, 1443, 904, 905, 906, 907, 0, 1, 3, 4} in 
          let pdcchi = {1296, 1297, 1298, 1299, 1148, 1149, 1150, 1151, 844, 845, 846, 
                        847, 1504, 1505, 1506, 1507, 600, 601, 602, 603, 1048, 1049, 1050, 
                        1051, 1352, 1353, 1354, 1355, 1576, 1577, 1578, 1579, 1272, 1273, 1274, 1275} in 
          do {
            for i in [0, 36] {
              cellGrid[pdcchi[i]] := pdcch_symbols[i];
            }
          }

        }

        let sched = configurePDSCH(NDLRB, tx.CellRefP, d, rnti);
        let outlen = countPDSCHToSubframe(sched, frame, subframe, tx);              -- *2 -> QPSK, hardcoded

        do {
          bufb2 := dlsch(bufb, bufb_len, outlen, d.RV);
          bufc_len := 0
        };

        -- There is no guarantee that outlen is in bytes, since it comes from TBS table (7.1.7 in 36.213)
        -- But we want to keep vectorized in bytes (8s), for speed. So we emit one more extra byte at the end,
        -- in case it is needed. The extra bits will be ignored as addPDSCHToSubframe takes as many as it needs
        for i in [0, outlen/8+1] emits bufb2[i*8, 8]
          >>> pdsch(subframe, rnti, d.Modulation, tx) >>> 
          repeat {
            pdsch_symbol <- take;

            do {
              bufc[bufc_len] := pdsch_symbol;
              bufc_len := bufc_len + 1;
            }
          }

        do {addPDSCHToSubframe(cellGrid, bufc, sched, frame, subframe, tx)};

--    }
};



