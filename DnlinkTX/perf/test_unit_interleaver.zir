----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include <externals.blk>
#include "../definitions.zir"
#include "../interleave.zir"


fun comp testInterleave() {
var input : arr[MAX_BIT_MSG_SIZE] bit;
var output : arr[MAX_BIT_MSG_SIZE] int8; 
var len1 : int16;
var len2 : int16;

-- Input and output length for a very large packet
let inlen = 6156;
#define OUTLEN  11312
let outlen = OUTLEN;

  times 10000 {
    do {
      let datalen = inlen/3;
      let datalenB = if (datalen % 8 > 0) then ((datalen / 8) + 1)*8 else datalen;

{-
      len1 := interleave(input[0, MAX_BIT_MSG_SIZE/3],          inlen/3, output[0, MAX_BIT_MSG_SIZE/3], INTL_TURBO, 0);
      len2 := interleave(input[datalenB, MAX_BIT_MSG_SIZE/3],   inlen/3, output[len1, MAX_BIT_MSG_SIZE/3], INTL_TURBO, 0);
      interleave(input[2*datalenB, MAX_BIT_MSG_SIZE/3], inlen/3, output[len1+len2, MAX_BIT_MSG_SIZE/3], INTL_TURBO, 1);
-}
      interleave3(input, datalenB, inlen/3, output, INTL_TURBO);
    }
    emits output[0, OUTLEN];
  }
}


let comp main = read[bit] >>> testInterleave() >>> write

