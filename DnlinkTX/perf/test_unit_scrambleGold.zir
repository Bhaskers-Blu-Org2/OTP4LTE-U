----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include "../definitions.zir"
#include "../scramble_gold.zir"


fun comp testScramble() {
var outcode : arr[MAX_BIT_MSG_SIZE] bit;
var output : arr[MAX_BIT_MSG_SIZE] bit; 
var outlen : int16;
#define OUTLEN  11312
var x : arr[OUTLEN] bit;
var tx : struct TXParams; 

  do {
    tx := configTX();
    tx := initTXParams(tx);
  }
  let rnti = 2;
  let start = 0;

#ifndef USE_PRECALCULATED_PDSCH_GOLD
do {
  println "Not using USE_PRECALCULATED_PDSCH_GOLD!!!";
}
#endif

  let NSubframe = 0;

  times 10000 {
    let i = find_RNTI(rnti) in
    let g = tx.pdsch_gold[MAX_GOLD_SEQUENCE_LEN*MAX_RNTI*int32(NSubframe) 
                        + MAX_GOLD_SEQUENCE_LEN*int32(i), MAX_GOLD_SEQUENCE_LEN] in 

    emits x >>> scramble_gold_bytes(start, g)
  }
}


let comp main = read[bit] >>> testScramble() >>> write

