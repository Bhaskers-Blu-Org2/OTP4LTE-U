----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include <abs.blk>
#include "../definitions.zir"
#include "../addDLSCHToSubframe.zir"


-- This tests how much time it takes to prepare a large PDSCH packet
-- We send 1000 packets, so it should take much less than 1s 

fun comp source() {
var dlSCH : struct MACDLPacket;
do{
  dlSCH.frame:=0; 
  dlSCH.subframe:=0;
  dlSCH.packetType:=MAC_DL_SCH;
  dlSCH.packetSubtype:=MAC_RRC_Setup;
  dlSCH.len:=65*8;
  dlSCH.RV:=0;
  dlSCH.RNTI:=64;
  dlSCH.lenRB:=12;
  dlSCH.startRB:=0;
};

repeat{
  emit dlSCH;
}

}

fun comp test_genFrameFreq() {
var cellGrid : arr[10*NDLRB*12*14] complex16;
var frame : int16 := 0;
var packet : struct MACDLPacket;

  let tx = configTX();

  for cnt in [0, 1000*10] {
      let subframe = 0;
      x <- take;
      do{packet := x};
      addDLSCHToSubframe(cellGrid[int32(subframe)*NDLRB*12*14, NDLRB*12*14], packet, tx);

      emits cellGrid[int32(subframe)*NDLRB*12*14, NDLRB*12*14];
  }
};

let comp main = read[int] >>> source() >>> test_genFrameFreq() >>> write
