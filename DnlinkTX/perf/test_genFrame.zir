----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include <abs.blk>
#include "../definitions.zir"
#include "../genTemplateSubframe.zir"
#include "../addDCI0ToSubframe.zir"
#include "../addMIBToSubframe.zir"
#include "../addSIBToSubframe.zir"
#include "../addRARToSubframe.zir"
#include "../modulate.zir"

fun comp test_genFrameFreq() {
var cellGrid : arr[10*NDLRB*12*14] complex16;
var frame : int16 := 0;
var dlSCH : struct MACDLPacket;
var tx : struct TXParams; 

  do {
    tx := configTX();
    tx := initTXParams(tx);
  }

-- Initialize frame once for all
  for sf in [0, 10]{
    let subframe = int16(sf);
    genTemplateSubframe(cellGrid[int32(sf)*NDLRB*12*14, NDLRB*12*14], subframe, tx, true);
  }

-- Add MIB and SIB, which actually depend on the frame
  for cnt in [0, 1000] {
    for sf in [0, 10]{
      let subframe = int16(sf);
      addTestDCI0ToSubframe(cellGrid[int32(subframe)*NDLRB*12*14, NDLRB*12*14], frame, subframe, tx);
      addMIBToSubframe(cellGrid[int32(sf)*NDLRB*12*14, NDLRB*12*14], frame, subframe, tx);
      addSIBToSubframe(cellGrid[int32(sf)*NDLRB*12*14, NDLRB*12*14], frame, subframe, tx);
      if (subframe == 6) then { 
        let rapid = 0;
        let raRnti = 2;
        addRARToSubframe(cellGrid[int32(sf)*NDLRB*12*14, NDLRB*12*14], frame, subframe, tx, rapid, raRnti);
      }

      emits cellGrid[int32(sf)*NDLRB*12*14, NDLRB*12*14];
    }
    do {frame := (frame + 1) % 1024};
  }
};

let comp main = read[int] >>> test_genFrameFreq() >>> modulate() >>> write
