----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include <externals.blk>
#include <bits.blk>
#include "definitions.zir"

-- TODO: implement bit inversion in Ziria rather than here
fun mib (ndlrb : int16, phich_duration : int16, ng : int16, n_frame_div_4 : int16) {
var aMib : arr[24] bit := {'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0,'0};
-- TODO: get rid of tmp once we are able to compile let y = {x} in ...
var tmp  : arr[1] int8 := {0};
-- TODO: get rid of tmpb once we have int8_to_bit as language primitive
var tmpb : arr[8] bit := {'0,'0,'0,'0,'0,'0,'0,'0};

-- TODO: Rewrite as case
if ndlrb ==   6 then int8_to_bits(tmpb, {0})
        else if ndlrb ==  15 then int8_to_bits(tmpb, {1})
        else if ndlrb ==  25 then int8_to_bits(tmpb, {2})
        else if ndlrb ==  50 then int8_to_bits(tmpb, {3})
        else if ndlrb ==  75 then int8_to_bits(tmpb, {4})
        else if ndlrb == 100 then int8_to_bits(tmpb, {5})
        else int8_to_bits(tmpb, {0});
--        else error "Unknown MIB channel width" in 
aMib[0,3] := invert_bits(tmpb[0,3]); 

aMib[3] := if phich_duration == 0 then '0 else '1;

-- TODO: convert to enumerables
-- [1/6 1/2 1 2] = [0, 1, 2, 3];
tmp[0] := int8(ng);
int8_to_bits(tmpb, tmp);
aMib[4,2] := invert_bits(tmpb[0,2]);

tmp[0] := int8(n_frame_div_4);
int8_to_bits(tmpb, tmp);
aMib[6,8] := invert_bits(tmpb[0,8]);

return aMib;
};