----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include "definitions.zir"
fun modulate_qpsk_lut (x : arr[2] bit) {
  var outi : int16;

      if (x[0] == bit(0) && x[1] == bit(0)) then { 
         outi := 0
      } else {
        if (x[0] == bit(0) && x[1] == bit(1)) then { 
          outi := 1
        } else {
          if (x[0] == bit(1) && x[1] == bit(1)) then { 
            outi := 3
          } else { 
            outi := 2
          }
        } 
      };
  return outi
};


fun comp qpsk () { 
var outa : arr[4] complex16;
var outi : arr[4] int16;

seq{
  do{
    outa[0] := complex16{re=qpsk_mod_amp;im=qpsk_mod_amp};
    outa[1] := complex16{re=qpsk_mod_amp; im=-qpsk_mod_amp};
    outa[2] := complex16{re=-qpsk_mod_amp;im=qpsk_mod_amp};
    outa[3] := complex16{re=-qpsk_mod_amp;im=-qpsk_mod_amp}
  }; 

  repeat [8, 4] {
    (x : arr[2] bit) <- takes 2;
    emit outa[int32(modulate_qpsk_lut(x))];
  }

}
};


