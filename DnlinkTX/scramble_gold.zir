----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include <externals.blk>
--#include "gold.zir"

fun comp scramble_gold(start : int32, gold_seq : arr[MAX_GOLD_SEQUENCE_LEN] bit) {
var pos : int32 := 0;

    
-- Make sure this LUTs
--    scrambled = xor(g(nmod4*480+(1:480)), bits);
-- BOZIDAR: currently this cannot LUT because we cannot guarantee any granularity 
-- (e.g. PDCCH sends 27 bits)
  repeat <= [8,8] seq{
    x <- take;
    emit (x ^ gold_seq[start + pos]);
    do {pos := pos + 1};
  }
};



-- LUTtable scrambler that assumes the input is a round number of bytes (as oppose to e.g. 27 bits)
fun comp scramble_gold_bytes(start : int32, gold_seq : arr[MAX_GOLD_SEQUENCE_LEN] bit) {
var pos : int32 := 0;
var out : arr[8] bit;
  repeat <= [8,8]{
    x <- takes 8;
-- Below is correct but ~30% slower than v_xor8 due to lookups
{-
    do {
      let gs = gold_seq[start + pos, 8];
      for i in [0, 8] {
        out[i] := x[i] ^ gs[i];
      }
    }
    emits out;
-}
    emits v_xor8(x, gold_seq[start + pos, 8]);
    do {pos := pos + 8};
  }
};
