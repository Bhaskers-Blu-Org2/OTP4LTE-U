----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include "definitions.zir"
fun modulate_qam16_lut (x : arr[4] bit) {
  var outi : int16 := 0;

  if (x[0] == bit(1)) then {
    outi := outi + 8;
  } 
  if (x[1] == bit(1)) then {
    outi := outi + 4;
  } 
  if (x[2] == bit(1)) then {
    outi := outi + 2;
  } 
  if (x[3] == bit(1)) then {
    outi := outi + 1;
  } 

  return outi
};


fun comp qam16 () { 
var outa : arr[16] complex16;

  do{
    outa[0]  := complex16{re=qpsk_mod_amp/3;im=qpsk_mod_amp/3};
    outa[1]  := complex16{re=qpsk_mod_amp/3;im=qpsk_mod_amp/1};
    outa[2]  := complex16{re=qpsk_mod_amp/1;im=qpsk_mod_amp/3};
    outa[3]  := complex16{re=qpsk_mod_amp/1;im=qpsk_mod_amp/1};

    outa[4]  := complex16{re=qpsk_mod_amp/3;im=-qpsk_mod_amp/3};
    outa[5]  := complex16{re=qpsk_mod_amp/3;im=-qpsk_mod_amp/1};
    outa[6]  := complex16{re=qpsk_mod_amp/1;im=-qpsk_mod_amp/3};
    outa[7]  := complex16{re=qpsk_mod_amp/1;im=-qpsk_mod_amp/1};

    outa[8]  := complex16{re=-qpsk_mod_amp/3;im=qpsk_mod_amp/3};
    outa[9]  := complex16{re=-qpsk_mod_amp/3;im=qpsk_mod_amp/1};
    outa[10] := complex16{re=-qpsk_mod_amp/1;im=qpsk_mod_amp/3};
    outa[11] := complex16{re=-qpsk_mod_amp/1;im=qpsk_mod_amp/1};

    outa[12] := complex16{re=-qpsk_mod_amp/3;im=-qpsk_mod_amp/3};
    outa[13] := complex16{re=-qpsk_mod_amp/3;im=-qpsk_mod_amp/1};
    outa[14] := complex16{re=-qpsk_mod_amp/1;im=-qpsk_mod_amp/3};
    outa[15] := complex16{re=-qpsk_mod_amp/1;im=-qpsk_mod_amp/1};
  }; 

  repeat [8, 2] {
    (x : arr[4] bit) <- takes 4;
    emit outa[int32(modulate_qam16_lut(x))];
  }

};


