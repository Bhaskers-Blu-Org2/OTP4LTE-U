----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include "../definitions.zir"
#include "../configureDCI1A.zir"
#include "../dci.zir"

fun comp test_configureDCI1A() {
  let C_RNTI = 64;          -- Test C-RNTI


  let d = configureDCI1A(50, 12, 0, 144, 0, 0, 0, SI_RNTI);
  let dcibits = dci(d);
  emits dcibits;

  let d = configureDCI1A(50, 12, 0, 224, 0, 0, 0, SI_RNTI);
  let dcibits = dci(d);
  emits dcibits;

  let d = configureDCI1A(50, 12, 0, 328, 0, 0, 0, C_RNTI);
  let dcibits = dci(d);
  emits dcibits;

  let d = configureDCI1A(50, 12, 0, 1224, 0, 0, 0, C_RNTI);
  let dcibits = dci(d);
  emits dcibits;

  let d = configureDCI1A(50, 12, 0, 1864, 0, 0, 0, C_RNTI);
  let dcibits = dci(d);
  emits dcibits;

  let d = configureDCI1A(50, 23, 0, 2024, 0, 0, 0, C_RNTI);
  let dcibits = dci(d);
  emits dcibits;

  let d = configureDCI1A(50,  8, 0, 1096, 0, 0, 0, C_RNTI);
  let dcibits = dci(d);
  emits dcibits;

  -- Added to make input bit array size divisible by 8
  emit '0;
  emit '0;
  emit '0;
};

let comp main = read[int] >>> test_configureDCI1A() >>> write
