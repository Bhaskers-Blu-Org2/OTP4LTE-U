----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include "externals.blk"
#include "../configureDCI1A.zir"
#include "../configurePDSCH.zir"
#include "../addPDSCHToSubframe.zir"


fun comp test_addPDSCHToSubframe() {
var cellGrid : arr[NDLRB*12*14] complex16;
var data : arr[MAX_BIT_MSG_SIZE] complex16; 
var cnt : int16 := 0;


-- TEST 1
{
  let tx = configTX();
  let frame = 0;
  let subframe = 0;
  let rnti = 65500;
  let len = 328;
  let lenRB = 12;
  let startRB = 5;

  let rv = 0;
  let harqno = 0;
  let ndi = 0;

  let d = configureDCI1A(50, lenRB, startRB, len, rv, harqno, ndi, rnti);
  let sched = configurePDSCH(50, 1, d, rnti);

  do {
    zero_complex16(cellGrid);
    for i in [0, length(data)] {
      data[i] := complex16{re=int16(i+1); im=int16(i+1)};
    }

    addPDSCHToSubframe(cellGrid, data, sched, frame, subframe, tx);
  }
  for i in [0, length(cellGrid)]
  {
    emit cellGrid[i].re;
  }

  do {cnt := 0};
  let noSubCarrier = NDLRB * 12 in 
  for i in [0, noSubCarrier * 14] {
    if (cellGrid[i].re != 0) then {
      -- emit i+1;
      do {cnt := cnt + 1};
    }
  }

  let cnt2 = countPDSCHToSubframe(sched, frame, subframe, tx);
  if (2 * cnt != cnt2) then
    do {
      println "cnt: ", cnt, ", countPDSCHToSubframe: ", cnt2;
      error "TEST1 Corretness issue!"
    };
}


-- TEST 2
{
  let tx = configTX();
  let frame = 0;
  let subframe = 0;
  let rnti = 64;
  let len = 208;
  let lenRB = 8;
  let startRB = 0;
  let rv = 0;
  let harqno = 0;
  let ndi = 0;

  let d = configureDCI1A(50, lenRB, startRB, len, rv, harqno, ndi, rnti);
  let sched = configurePDSCH(50, 1, d, rnti);

  do {
    zero_complex16(cellGrid);
    for i in [0, length(data)] {
      data[i] := complex16{re=int16(i+1); im=int16(i+1)};
    }

    addPDSCHToSubframe(cellGrid, data, sched, frame, subframe, tx);
  }
  for i in [0, length(cellGrid)]
  {
    emit cellGrid[i].re;
  }

  do {cnt := 0};
  let noSubCarrier = NDLRB * 12 in 
  for i in [0, noSubCarrier * 14] {
    if (cellGrid[i].re != 0) then {
      -- emit i+1;
      do {cnt := cnt + 1};
    }
  }

  let cnt2 = countPDSCHToSubframe(sched, frame, subframe, tx);
  if (2 * cnt != cnt2) then
    do {
      println "cnt: ", cnt, ", countPDSCHToSubframe: ", cnt2;
      error "TEST2 Corretness issue!"
    };
}



-- TEST 3
{
  let tx = configTX();
  let frame = 0;
  let subframe = 0;
  let rnti = 64;
  let len = 2024;
  let lenRB = 23;
  let startRB = 0;
  let rv = 0;
  let harqno = 0;
  let ndi = 0;

  let d = configureDCI1A(50, lenRB, startRB, len, rv, harqno, ndi, rnti);
  let sched = configurePDSCH(50, 1, d, rnti);

  do {
    zero_complex16(cellGrid);
    for i in [0, length(data)] {
      data[i] := complex16{re=int16(i+1); im=int16(i+1)};
    }

    addPDSCHToSubframe(cellGrid, data, sched, frame, subframe, tx);
  }
  for i in [0, length(cellGrid)]
  {
    emit cellGrid[i].re;
  }

  do {cnt := 0};
  let noSubCarrier = NDLRB * 12 in 
  for i in [0, noSubCarrier * 14] {
    if (cellGrid[i].re != 0) then {
      -- emit i+1;
      do {cnt := cnt + 1};
    }
  }

  let cnt2 = countPDSCHToSubframe(sched, frame, subframe, tx);
  if (2 * cnt != cnt2) then
    do {
      println "cnt: ", cnt, ", countPDSCHToSubframe: ", cnt2;
      error "TEST3 Corretness issue!"
    };
}



-- TEST 4
{
  let tx = configTX();
  let frame = 0;
  let subframe = 0;
  let rnti = 64;
  let len = 2024;
  let lenRB = 23;
  let startRB = 10;
  let rv = 0;
  let harqno = 0;
  let ndi = 0;

  let d = configureDCI1A(50, lenRB, startRB, len, rv, harqno, ndi, rnti);
  let sched = configurePDSCH(50, 1, d, rnti);

  do {
    zero_complex16(cellGrid);
    for i in [0, length(data)] {
      data[i] := complex16{re=int16(i+1); im=int16(i+1)};
    }

    addPDSCHToSubframe(cellGrid, data, sched, frame, subframe, tx);
  }
  for i in [0, length(cellGrid)]
  {
    emit cellGrid[i].re;
  }

  do {cnt := 0};
  let noSubCarrier = NDLRB * 12 in 
  for i in [0, noSubCarrier * 14] {
    if (cellGrid[i].re != 0) then {
      -- emit i+1;
      do {cnt := cnt + 1};
    }
  }

  let cnt2 = countPDSCHToSubframe(sched, frame, subframe, tx);
  if (2 * cnt != cnt2) then
    do {
      println "cnt: ", cnt, ", countPDSCHToSubframe: ", cnt2;
      error "TEST4 Corretness issue!"
    };
}

};

let comp main = read[int] >>> test_addPDSCHToSubframe() >>> write

