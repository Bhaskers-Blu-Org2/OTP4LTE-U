----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include <externals.blk>
#include "../definitions.zir"
#include "../rateMatchTurbo.zir"


fun comp test_rateMatchTurbo() {
var input : arr [MAX_BIT_MSG_SIZE] bit;
var output : arr [MAX_BIT_MSG_SIZE] bit;

  x <- takes 24;
  let len = 10;
  do {
    input[0, 24] := x;
    rateMatchTurbo(input, 24, output, len, 0)
  };
  for i in [0, len] {
    emit output[i];
  }

  x <- takes 24;
  let len = 100;
  do {
    input[0, 24] := x;
    rateMatchTurbo(input, 24, output, len, 2)
  };
  for i in [0, len] {
    emit output[i];
  }

  x <- takes 72;
  let len = 60;
  do {
    input[0, 72] := x;
    rateMatchTurbo(input, 72, output, len, 1)
  };
  for i in [0, len] {
    emit output[i];
  }

  x <- takes 72;
  let len = 600;
  do {
    input[0, 72] := x;
    rateMatchTurbo(input, 72, output, len, 0)
  };
  for i in [0, len] {
    emit output[i];
  }

  x <- takes 2508;
  let len = 5796;
  do {
    -- rateMatchTurbo expects input to contain 3 consecutive byte-aligned subarrays
    input[0, 836] := x[0, 836];
    input[840, 836] := x[836, 836];
    input[2*840, 836] := x[2*836, 836];
    rateMatchTurbo(input, 2508, output, len, 0)
  };
  for i in [0, len] {
    emit output[i];
  }

};

let comp main = read[bit] >>> test_rateMatchTurbo() >>> write[bit]


