----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include "../definitions.zir"
#include "../genTemplateSubframe.zir"
#include "../addRARToSubframe.zir"
#include "../addDCI0ToSubframe.zir"

fun comp test_addRARToSubframe() {
var cellGrid : arr[NDLRB*12*14] complex16;
var tx : struct TXParams; 

  do {
    tx := configTX();
    tx := initTXParams(tx);
  }

{- 
  -- This fails to compile due to Ziria issue #117
  let aFrame = {0};
  let aSubFrame = {6};
  let aRapid = {0};
  let aRaRnti = {2};

  for f in [0, length(aFrame)]{
    let frame = aFrame[f];
    let subframe = aSubFrame[f];
    let rapid = aRapid[f];
    let raRnti = aRaRnti[f];

    genTemplateSubframe(cellGrid, subframe, tx, true);
    addTestDCI0ToSubframe(cellGrid, frame, subframe, tx);
    addRARToSubframe(cellGrid, frame, subframe, tx, rapid, raRnti);

    emits cellGrid;
  }
-}

  let aFrame = {0};
  let aSubFrame = {6};
  let aRapid = {0};
  let aRaRnti = {2};

  let frame = 0;
  let subframe = 6;
  let rapid = 0;
  let raRnti = 2;

  genTemplateSubframe(cellGrid, subframe, tx, true);
  addTestDCI0ToSubframe(cellGrid, frame, subframe, tx);
  addRARToSubframe(cellGrid, frame, subframe, tx, rapid, raRnti);

  emits cellGrid;

};

let comp main = read[int] >>> test_addRARToSubframe() >>> write



