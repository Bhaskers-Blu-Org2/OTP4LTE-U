----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include <externals.blk>
#include "../definitions.zir"
#include "../interleave.zir"


fun comp test_interleave() {
var output : arr [MAX_BIT_MSG_SIZE] int8;
var len : int16;

  x <- takes 35;
  do {len := interleave(x, 35, output[0, MAX_BIT_MSG_SIZE/3], 0, 0)};
  for i in [0, len/32] {
    emits output[i*32, 32];
  }

  x <- takes 35;
  do {len := interleave(x, 35, output[0, MAX_BIT_MSG_SIZE/3], 0, 3)};
  for i in [0, len/32] {
    emits output[i*32, 32];
  }

  -- This is the fastest, new, integrated version of interleaver taylored for rateMatchTurbo
  x <- takes (2052*3);
  do {len := 3*interleave3(x, 2052, 2052, output, 1)};
  for i in [0, len/32] {
    emits output[i*32, 32];
  }

{-
  x <- takes 2052;
  do {len := interleave(x, 2052, output, 1, 0)};
  for i in [0, len/32] {
    emits output[i*32, 32];
  }

  x <- takes 2052;
  do {len := interleave(x, 2052, output, 1, 0)};
  for i in [0, len/32] {
    emits output[i*32, 32];
  }

  x <- takes 2052;
  do {len := interleave(x, 2052, output, 1, 1)};
  for i in [0, len/32] {
    emits output[i*32, 32];
  }
-}


};

let comp main = read[bit] >>> test_interleave() >>> write[int8]


