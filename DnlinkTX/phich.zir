----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include "definitions.zir"
#include "gold.zir"
#include "pcfich_regs.zir"

-- Currently nSeq == 0
fun phich(NCellID : int16, subframe : int16, Ng : int16, nGroup : int16, nSeq : int16, ack : int16) {
var d : arr[12] complex16;

  let Ngroups = ceil_int16(double(Ng) * double(NDLRB) / 8.0);
  let z = (1-2*ack) * qpsk_mod_amp;
  let w = 1;
  let cinit = (int32(subframe+1)*int32(2*NCellID+1)<<9) + int32(NCellID);
  let g = gold(cinit, 12);

  for i in [0, 12] {
    let r = if (g[i] == '1) then -w*z else w*z;
    d[i] := complex16{re=r; im=r};
  };

  return d;
}



fun write_phich(var dst : arr complex16, NCellID : int16, subframe : int16, Ng : int16, nGroup : int16, nSeq : int16, ack : int16) {
var index : int;
var group_k : arr[(2*NDLRB-1)*28] int16;
var indices : arr[(2*NDLRB-1)*28*6] int16;

  let d = phich(NCellID, subframe, Ng, nGroup, nSeq, ack);

  -- This part does not depend on subframe and can be precalculated, if needed
  -- Max value of Ng is 2, of NDLRB is 110, so max nPHICHgroups is 28
  let nPHICHgroups = ceil_int16(double(Ng) * double(NDLRB) / 8.0);
  let regs = pcfich_regs(NCellID, NDLRB);
  let n0 = 2*NDLRB-4;

  for i in [0, 3] {
    for j in [0, nPHICHgroups] {
      var cnt : int16 := 0;
      group_k[j*3+i] := (i*n0/3 + j + NCellID) % n0;
      cnt := 0;
      for k in [0, length(regs)] {
        if regs[k] < group_k[j*3+i]+1 then {
           cnt := cnt + 1;
        }
      }
      group_k[j*3+i] := group_k[j*3+i] + cnt;
    }
  }

  let crs_k = NCellID % 3;  -- CRS starting index
  index := 0;
  for i in [0, int32(nPHICHgroups)*length(regs)] {
    for j in [0, 6] {
      let val = group_k[i] * 6 + j;
      if (val % 3 != crs_k) then {
         indices[index] := val;
         index := index+1;  
      }
    }
  }
 
  for i in[0, 12] {
    dst[indices[12*nGroup+i]] := d[i];
  }
}