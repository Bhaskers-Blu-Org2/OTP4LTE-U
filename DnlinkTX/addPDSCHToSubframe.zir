----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include "definitions.zir"


-- TODO: Test both functions for various scheduling combinations
-- Currently tested only against PRBStart = 0, PRBLen = 12.


-- Count the number of REs acquired by the sched
-- TODO: Test this for various channel sizes (NDLRB). It is very different between 5 MHz and 10 MHz.
fun countPDSCHToSubframe(sched : struct PDSCHParams, frame : int16, subframe : int16, tx : struct TXParams) {
  let REStart = sched.PRBStart * 12;
  let RELen = sched.PRBLen * 12;
  
  let sigStartRB  = NDLRB / 2 - 3;            -- PSS, SSS, MIB area in RBs

  -- Count the overlap of schedule and signal area
  let sigOverlapRB = 
    if (sched.PRBStart < sigStartRB && sigStartRB + 6 < sched.PRBStart + sched.PRBLen) then 6
    else if (sched.PRBStart < sigStartRB + 6 && sigStartRB + 6 < sched.PRBStart + sched.PRBLen) then (sigStartRB + 6 - sched.PRBStart)
    else if (sched.PRBStart < sigStartRB && sigStartRB < sched.PRBStart + sched.PRBLen) then (sched.PRBStart + sched.PRBLen - sigStartRB)
    else if (sched.PRBStart > sigStartRB && sigStartRB > sched.PRBStart + sched.PRBLen) then (sched.PRBLen)
    else 0;

  let noPilots = if (tx.CellRefP == 1) then 6 else 12;
  let noPilotsMIB = if (tx.CellRefP == 1) then 4 else 8; 

  let count = 
    if (subframe == 0) then             -- PSS + SSS + MIB
      ((sched.PRBLen - sigOverlapRB) * ((14 - tx.CFI)*12 - noPilots)) + 
       sigOverlapRB * ((8 - tx.CFI)*12 - noPilotsMIB)
    else if (subframe == 5) then        -- PSS + SSS
      ((sched.PRBLen - sigOverlapRB) * ((14 - tx.CFI)*12 - noPilots)) + 
       sigOverlapRB * ((8 - tx.CFI)*12 - noPilotsMIB)
    else 
      (sched.PRBLen * ((14 - tx.CFI)*12 - noPilots))
  in

  let count_enc_bits = 
    if sched.Modulation == PDSCH_MODULATION_BPSK then
      count
    else if sched.Modulation == PDSCH_MODULATION_QPSK then
      count * 2
    else if sched.Modulation == PDSCH_MODULATION_16QAM then 
      count * 4
    else
      count * 6
  in 

  return count_enc_bits;
};




-- Store the data in REs as described by the sched
fun addPDSCHToSubframe(var cellGrid : arr complex16, data : arr complex16, sched : struct PDSCHParams, 
                       frame : int16, subframe : int16, tx : struct TXParams) {
var src : int32 := 0;
var dst : int32;


  -- System parameters
  let noSubCarrier = NDLRB * 12;

  -- RS:
  let sym0      = if (tx.CellRefP == 1) then (tx.NCellID % 6) else (tx.NCellID % 3);
  let sym4      = (tx.NCellID % 3);
  let symstep   = if (tx.CellRefP == 1) then 6 else 3;

  -- PSS, SSS, MIB: 
  let sigWidth = 6 * 12;
  let sigStart = NDLRB * 6 - (sigWidth/2);

  let REStart = sched.PRBStart * 12;
  let RELen = sched.PRBLen * 12;
  let start = tx.CFI * noSubCarrier + REStart;

  dst := int32(start);
  while (src < int32(length(data)) && (dst / int32(noSubCarrier)) < 14) { 
    let sc = (dst % int32(noSubCarrier)) in 
    let sym = (dst / int32(noSubCarrier)) in 
    let sig = ((subframe == 0 && (sym >= 5 && sym <= 10)) || 
               (subframe == 5 && (sym >= 5 && sym <= 6))) in 

    if (((sym % 7) != 0 && (sym % 7) != 4)) then {
      -- No pilots
      if (sig) then {
        -- PSS, SSS or MIB
        -- Note: This is a dirty way of copying subarrays (just pointers - arr[1], no type checks on array lengths)
        -- TODO: Make this cleaner
        let copy_len = if (REStart + RELen <= sigStart) then RELen else sigStart - REStart;
        copy_complex16(cellGrid[dst,1], data[src,1], int32(copy_len));
        src := src + int32(copy_len);

        -- DEBUG
        -- println "D1: ", dst, " ", sigStart, " ", src, " ", tx.CFI, " ", copy_len;

        if (REStart + RELen > sigStart + sigWidth) then {
          let copy_len = REStart + RELen - sigStart - sigWidth;
          copy_complex16(cellGrid[dst+int32(sigStart+sigWidth-REStart),1], data[src,1], int32(copy_len));
          src := src + int32(copy_len);
        }

        dst := dst + int32(noSubCarrier);
      } else {
        -- No PSS, SSS or MIB
        copy_complex16(cellGrid[dst,1], data[src,1], int32(RELen));
        dst := dst + int32(noSubCarrier);
        src := src + int32(RELen);
      }
    } else {
      -- With pilots
      let symp = if ((sym % 7) == 0) then sym0 else sym4;
      let copy_len = if (sc - int32(REStart) < int32(symp)) then (int32(symp) + int32(REStart) - sc)
                     else if (sig && sc + 5 > int32(sigStart) 
                                  && sc + 5 <= int32(sigStart + sigWidth)) then (int32(sigStart) - sc)
                     else if (sc + 5 > int32(RELen) + int32(REStart)) then (int32(RELen) + int32(REStart) - sc)
                     else 5;

      -- println "DD: ", dst, " ", src, " ", copy_len, " ", sc, " ", symp;
      copy_complex16(cellGrid[dst,1], data[src,1], int32(copy_len));
      
      src := src + copy_len;
      if (sig && sc + copy_len == int32(sigStart)) then {
        dst := dst + 72;
      } else { 
        if (sc + copy_len == int32(sigStart)) then {
          dst := dst + copy_len;
        } else {
          dst := dst + copy_len + 1;
        }
      }
      if ((dst % int32(noSubCarrier)) >= int32(RELen + REStart)) then
      {
        dst := ((dst / int32(noSubCarrier)) + 1) * int32(noSubCarrier) + int32(REStart);
      }
    }
  }
};

