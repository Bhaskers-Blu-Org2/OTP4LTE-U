----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include "definitions.zir"
#include "qpsk.zir"
#include "scramble_gold.zir"

fun comp pdcch(NSubframe : int16, CCE:int16, params : struct TXParams) {
  let NCellID = params.NCellID in
  let cinit = (int32(NSubframe) << 9) + int32(NCellID) in
  let start = int32(CCE)*72 in 
  -- TODO: Calculate the largest DCI message size
  let len = MAX_BIT_MSG_SIZE in 
  
#ifdef USE_PRECALCULATED_PDSCH_GOLD
  let g = params.pdcch_gold[MAX_PDCCH_GOLD_SEQUENCE_LEN*int32(NSubframe), MAX_GOLD_SEQUENCE_LEN] in 
#else
  let g = gold(cinit, len) in 
#endif
  scramble_gold(start, g) >>> qpsk()

};

