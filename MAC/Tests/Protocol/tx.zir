----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include "../../../DnlinkTX/definitions.zir"
#include "../../../General/TimingInfo.zir"


fun comp tx() {
var frame : int16 := 0;
var subframe : int16 := 0;
var packet : struct MACDLPacket;
var RXtime : struct TimingInfo;

  times 10 {

    do {
      let time = TimingInfo{frame=int16(frame); subFrame=int16(subframe); slot=0; symbol=0; sample=0};
      setTXTime(time);

      RXtime := getRXTime();
      while (RXtime.frame != frame || RXtime.subFrame != subframe) {
        RXtime := getRXTime();
      }
    }

    --do {println "TX time: ", frame, " ", subframe};

    -- Take the first DL-SCH packet
    (p : struct MACDLPacket) <- take;
    do{ packet := p };

    while (packet.packetType != MAC_NO_PKT) {
      --do{println "PHY TX Packet: ", packet.frame, " ", packet.subframe};
      emit packet.frame;
      emit packet.subframe;

      (p : struct MACDLPacket) <- take;
      do{ packet := p };
    }


    do {
      if (subframe == 9) then {
        subframe := 0;
        frame := (frame + 1) % LTE_NO_FRAMES
      } else { 
        subframe := subframe+1;
      }
    }
  }

  -- Exit
  do{RXtime.frame := -1; setTXTime(RXtime)};
}

let comp main = read[struct MACDLPacket] >>> tx() >>> write
