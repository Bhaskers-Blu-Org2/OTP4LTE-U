----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once 

#include <externals.blk>
#include "fft3x512coeffs.zir"


-- TODO: All these inits should be written as 
--    let a = {complex16{re=..., im=...}} 
-- once parser starts supporting that

-- Here we define arr[4] to benefit from SSE SIMD
-- but it is essentially a constant multiplication.
fun init0_fft3x512 () {
  var w0Vec : arr[4] complex16;
  for k in [0,4] {
    w0Vec[k] := complex16{re = 10923; im = 0};
  };
  return w0Vec;
}

fun init1_fft3x512 () {
  var wVec : arr[1536] complex16;
  for k in [0,1536] {
    wVec[k] := complex16{re = wVecReal[k]; im = wVecImag[k]};
  };
  return wVec;
}

fun init2_fft3x512 () {
  var w2Vec : arr[1536] complex16;
  for k in [0,1536] {
    w2Vec[k] := complex16{re = w2VecReal[k]; im = w2VecImag[k]}
  };
  return w2Vec;
}


fun fft3x512 (x : arr[1536] complex16, w0Vec : arr[4] complex16, wVec : arr[1536] complex16, w2Vec : arr[1536] complex16) {
  var y1 : arr[512] complex16; var y2 : arr[512] complex16; var y3 : arr[512] complex16;
  var yf1 : arr[512] complex16; var yf2 : arr[512] complex16; var yf3 : arr[512] complex16;
  var y : arr[1536] complex16;

  for k in [0,512] {
    y1[k] := x[0+k*3];
    y2[k] := x[1+k*3];
    y3[k] := x[2+k*3]
  };
      
  yf1 := sora_fft(y1);
  yf2 := sora_fft(y2);
  yf3 := sora_fft(y3);


  for offmul in [0, 3] {
    let offset = offmul * 512;
    for i in [0, 512/4] {    
      v_mul_complex16(y1[i*4,4], yf1[i*4,4], w0Vec, 15);
    }
    v_mul_complex16(y2, yf2, wVec[offset,512], 15);
    v_mul_complex16(y3, yf3, w2Vec[offset,512], 15);
    v_add_complex16(y[offset,512], y1, y2);
    v_add_complex16(y[offset,512], y[offset,512], y3);
  }
      
  return y;
};

