----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#define FFT_1024

#include <abs.blk>
#include "../fft3x512.zir"
#include "../detectUE.zir"


#define PRACH_SAMPLING  16
#ifdef FFT_1024
  #define SAMPLING      2
#else
  #define SAMPLING      1
#endif 


fun comp test_fullPRACH () {
  var preambleTable1 : arr[840*NUM_PREAMBLES] complex16;
  var preambleTable2 : arr[840*NUM_PREAMBLES] complex16;
  var preambleTable3 : arr[840*NUM_PREAMBLES] complex16;
  var w0Vec : arr[4] complex16;
  var wVec : arr[1536] complex16;
  var w2Vec : arr[1536] complex16;
  var x : arr[1536] complex16;
--  var xs : arr[1536] complex16;
  var xf : arr[1536] complex16;
  var out1 : struct PRACHInfo;
  var out2 : struct PRACHInfo;
  var out3 : struct PRACHInfo;

  -- TODO: this need only be done once (make it static)
  do{
    w0Vec := init0_fft3x512 ();
    wVec := init1_fft3x512 ();
    w2Vec := init2_fft3x512 ();

    let numPreamble = 0 in 
    preambleTable1 := detectPRACH_table(numPreamble);
    let numPreamble = 1 in 
    preambleTable2 := detectPRACH_table(numPreamble);
    let numPreamble = 2 in 
    preambleTable3 := detectPRACH_table(numPreamble);

    -- let numPreamble = 19 in 
    -- preambleTable1 := detectPRACH_table(numPreamble);
    -- let numPreamble = 20 in 
    -- preambleTable2 := detectPRACH_table(numPreamble);
    -- let numPreamble = 21 in 
    -- preambleTable3 := detectPRACH_table(numPreamble);
  };   
  
  {
    (cp : arr complex16) <- takes (198/2*PRACH_SAMPLING/SAMPLING);
    (xi : arr complex16) <- takes 1536*PRACH_SAMPLING/SAMPLING;
    do {
      -- Downsample by /16 to 1.92 MHz
      for i in [0, 1536] {
        x[i] := xi[i*PRACH_SAMPLING/SAMPLING];
        --x[i] := complex16{re=x[i].re/50; im=x[i].im/50};
        --x[i] := complex16{re=x[i].re/10; im=x[i].im/10};
        --x[i] := complex16{re=x[i].re/6; im=x[i].im/6};
        --x[i] := complex16{re=x[i].re*3; im=x[i].im*3};
        --x[i] := complex16{re=x[i].re*10; im=x[i].im*10};
        --x[i] := complex16{re=x[i].re*100; im=x[i].im*100};
      };

      -- Do the AGC before anything else to get the best precision
      let pwr = 50000000 in
      let offset = 1000 in
      let xs = agc(x, pwr, offset) in
      xf := fft3x512(xs, w0Vec, wVec, w2Vec);


      out1 := detectUE(xf, preambleTable1);
      out2 := detectUE(xf, preambleTable2);
      out3 := detectUE(xf, preambleTable3);

      -- DEBUG
      println int32(out1.index), " ", out1.corr;
      println int32(out2.index), " ", out2.corr;
      println int32(out3.index), " ", out3.corr;

    };
    emit int32(out1.index);
    --emit out1.corr;
    emit int32(out2.index);
    --emit out2.corr;
    emit int32(out3.index);
    --emit out3.corr;
  }
};

let comp main = read >>> test_fullPRACH() >>> write
