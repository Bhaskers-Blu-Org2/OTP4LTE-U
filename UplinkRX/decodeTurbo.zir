----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#pragma once
#include <externals.blk>
#include <LTE_lib.zir> 


-- Bozidar: These were choosen in MSRA implementation of Turbo Decoder
#define DT_IN_LEN       6520
#define DT_OUT_LEN      6144


-- length: length of of the unencoded packet (/3)
-- Output has length of MAX_UL_BIT_MSG_SIZE bits
fun decodeTurbo(input : arr int8, len : int16) {
var input1:arr[DT_IN_LEN] int8;
var input2:arr[DT_IN_LEN] int8;
var input3:arr[DT_IN_LEN] int8;
var output:arr[DT_OUT_LEN] bit;

  let lenWTrail = len + 4;

  -- Length is fake here, we effectively just need to pass a pointer and external code doesn't check
  -- We need to copy, we cannot just reference a sub-array because the start has to be 16B algined
  copy_int8(input1, input[0,1], int32(lenWTrail));
  copy_int8(input2, input[lenWTrail,1], int32(lenWTrail));
  copy_int8(input3, input[2*lenWTrail,1], int32(lenWTrail));

  return deturbo(lenWTrail, input1, input2, input3);
}

