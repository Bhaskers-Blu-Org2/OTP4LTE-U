----------------------------------------------------------------------------------
--
-- MIT License
--
-- Copyright (c) 2016 Microsoft
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal
-- in the Software without restriction, including without limitation the rights
-- to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-- copies of the Software, and to permit persons to whom the Software is
-- furnished to do so, subject to the following conditions:
--
-- The above copyright notice and this permission notice shall be included in
-- all copies or substantial portions of the Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-- IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-- FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-- AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-- LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-- OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-- THE SOFTWARE.
--
----------------------------------------------------------------------------------

#include <abs.blk>
#include "../demodulate.zir"
#include "../equalize.zir"
#include "../deprecode.zir"



fun comp amp(level : int16) {
  repeat {
    (x : complex16)<-take;
    emit complex16{re=x.re*level; im=x.im*level};
  }
}


fun comp debug(level : int) {
  x <- takes 10;
  do{println level, " ", x};
  emits x;
  repeat{
    x<-take;
    emit x;
  }
}


-- NRB here hardcoded to 8
#define CNRB         8


fun comp uplinkPHY(NCellID : int16, rnti : int32, subframe : int16, startRB : int16) {
var params : struct ULRXParams;
  let len = CNRB*12*12;
  do{init_demodulate(params)};
  do{init_DRS(params, NCellID, CNRB)}; 
  demodulate(params) >>> 
    repeat { 
       -- Mock PUCCH
      (grid : arr complex16) <- takes (NULRB) * 12;
      emits grid[12, (NULRB-2)*12];
    } >>> 
    equalize(NCellID, CNRB, subframe, startRB, params) >>> deprecode(CNRB) >>> amp(10)
}


let comp main = read >>> uplinkPHY(0, 0, 0, 0) >>> write;


